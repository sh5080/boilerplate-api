generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AuthProvider {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  isActive Boolean @default(true)
  users    User[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String? // 소셜 로그인만 사용하는 경우 null 가능
  name           String
  authProviderId Int // 인증 제공자
  phoneNumber    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  authProvider AuthProvider     @relation(fields: [authProviderId], references: [id])
  blocks       UserBlock[]
  events       UserEvent[]
  role         UserRole?
  profile      UserProfile?
  permissions  UserPermission[]
  posts        Post[]
}

enum Role {
  USER
  ADMIN
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String @unique
  role   Role   @default(USER)
  user   User   @relation(fields: [userId], references: [id])
}

model UserProfile {
  id           Int     @id @default(autoincrement())
  userId       String  @unique
  nickname     String? // 닉네임
  introduction String? // 자기소개
  interests    String? // 관심사
  image        String? @db.Text // 프로필 이미지 url
  affiliation  String? // 소속
  class        String? // 학력 /직장
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBlock {
  id       Int         @id @default(autoincrement())
  userId   String
  reasonId Int
  user     User        @relation(fields: [userId], references: [id])
  reason   BlockReason @relation(fields: [reasonId], references: [id])
}

model BlockReason {
  id          Int         @id @default(autoincrement())
  description String
  userBlocks  UserBlock[]
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  UserEvent   UserEvent[]
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  eventId   Int
  isAgreed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id])
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  userPermissions UserPermission[]
}

model UserPermission {
  id           Int      @id @default(autoincrement())
  userId       String
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  content     String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User           @relation(fields: [authorId], references: [id])
  categories PostCategory[]
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  posts       PostCategory[]
}

model PostCategory {
  id         Int      @id @default(autoincrement())
  postId     Int
  categoryId Int
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}
